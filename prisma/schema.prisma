// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int        @id @default(autoincrement())
  uuid        String     @unique @default(uuid()) @db.Uuid()
  sessionId   String     @unique
  country     String?
  ipAddress   String?
  userAgent   String?
  visitSource String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  UserPage    UserPage[]

  @@map("users")
}

model UserPage {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid()) @db.Uuid()

  visitCount Int      @default(0)
  duration   Int?     @default(0) // Time in miliseconds
  userId     Int
  pageId     Int
  User       User     @relation(fields: [userId], references: [id])
  Page       Page     @relation(fields: [pageId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, pageId], name: "unique_user_page")
  @@map("user_pages")
}

model Page {
  id        Int        @id @default(autoincrement())
  uuid      String     @unique @default(uuid()) @db.Uuid()
  pageUrl   String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  UserPage  UserPage[]

  @@map("pages")
}

//========Features==========
// Total views by pages
// Total views by country
// Total views by source
// Total users ✅
// Total views ✅
